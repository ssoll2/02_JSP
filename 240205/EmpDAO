package com.emp.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class EmpDAO {
	
	Connection con = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	String sql = null;
	
	// EmpDAO 객체를 싱클턴 방식으로 만들어보자.
	// 1단계 : EmpDAO 객체를 정적(static)멤버로 선언을 해 줘야 한다. static-> 객체를 생성하지 않아도 접근이 가능한 방식
	// 국룰..
	private static EmpDAO instance = null;
	
	// 2단계 : 싱클턴 방식으로 객체를 만들기 위해서는 우선적으로 
	// 		 기본생성자의 접근제어자를 public이 아닌
	//		 private으로 바꾸어 줘야 한다.
	//		 즉, 외부에서 직접적으로 기본생성자를 접근하여
	// 		 호출하지 못하도록 하는 방법이다.
	private EmpDAO() {}
	
	// 3단계 : 기본 생성자 대신에 싱글턴 객체를 return 해주는
	//		 getInstance()라는 메서드를 만들어서 해당
	//		 getInstance() 메서드를 외부에서 접근할 수 있도록 해주면 됨
	public static EmpDAO getInstance() {
		
		if(instance == null) {
			instance = new EmpDAO();
		}
		return instance;
	}// getInstance() 메서드 end
	
	// DB 연동하는 작업을 진행하는 메서드.
	public void openConn() {
		
		String driver = "com.mysql.cj.jdbc.Driver";
		String url = "jdbc:mysql://localhost:3333/hms";
		String user = "root";
		String password = "1234";
		
		try {
			// 1단계 : mysql드라이버를 메모리로 로딩 작업.
			Class.forName(driver);
			
			// 2단계 : mysql 데이터베이스와 연결 작업 진행
			con = DriverManager.getConnection(url, user, password);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}// openConn() end
	
	// DB에 연결된 자원을 종료하는 메서드
	public void closeConn(ResultSet rs, PreparedStatement pstmt, Connection con) {
		
		try {
			// open한 역순으로 close한다.
			if (rs != null) {
				rs.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
			if (con != null) {
				con.close();
			}
		}catch (SQLException e) {
			e.printStackTrace();
			
		}
	} // closeConn() end
public void closeConn(PreparedStatement pstmt, Connection con) {
		
		try {
			// open한 역순으로 close한다.
			if (pstmt != null) {
				pstmt.close();
			}
			if (con != null) {
				con.close();
			}
		}catch (SQLException e) {
			e.printStackTrace();
		}
	} // closeConn() end
	
	// Emp 테이블에서 전체 사원 리스트를 조회하는 메서드.
	public List<EmpDTO> dao.allList() {
		
		// List(컬렉션) 안에 EmpDTO 객체를 하나씩 넣을 준비한다.
		List<EmpDTO> list = new ArrayList<EmpDTO>();
		
	
		
		try {
			// 1~2단계 진행 : 드라이버 로딩 및 데이터베이스와 연동 작업 진행
			openConn(); // EmpDAO에 이미 관련 작업 메서드를 만들었기 때문에 호출만 하면 처리 끝
			
			// 3단계 : 데이터베이스에 전송할 SQL문 작성.
			sql = "select * from emp order by empno desc";
			
			// 4단계 : SQL문을 데이터베이스 전송객체에 인자로 전달
			pstmt = con.prepareStatement(sql);
			
			// 5단계 : SQL문을 DB에 전송 및 실행
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				
				// 가져온 데이터를 DTO에 담는다.
				EmpDTO dto = new EmpDTO();
				
				dto.setEmpno(rs.getInt("empno"));
				dto.setEname(rs.getString("ename"));
				dto.setJob(rs.getString("job"));
				dto.setMgr(rs.getInt("mgr"));
				dto.setHiredate(rs.getString("hiredate"));
				dto.setComm(rs.getInt("comm"));
				dto.setDeptno(rs.getInt("deptno"));
				
				// dto에 담은 데이터를 리스트에 추가한다.
				list.add(dto);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 6단계 : 데이터베이스와 연결되어 있던 자원 종료.
			closeConn(rs, pstmt, con);
			
		}
		return list;
		
	}// allList() end



}// class end()
